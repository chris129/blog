1、服务器安装nginx和git python3 python3-pip
2、安装virtualenv ： pip3 install virtualenv


3、项目修改
    Django 项目中会有一些 CSS、JavaScript 等静态文件，为了能够方便地让 Nginx 处理这些静态文件的请求，我们把项目中的全部静态文件收集到
    一个统一的目录下，这个目录通常位于 Django 项目的根目录，并且命名为 static。为了完成这些任务，需要在项目的配置文件里做一些必要的配置：
    blogproject/settings.py
    # 其他配置...
    STATIC_URL = '/static/'
    # 加入下面的配置
    STATIC_ROOT = os.path.join(BASE_DIR, 'static')
    STATIC_ROOT 指明了静态文件的收集目录，即项目根目录（BASE_DIR）下的 static 文件夹。
    为了安全起见，在生产环境下需要关闭 DEBUG 选项以及设置允许访问的域名。打开 settings.py
    文件，找到 DEBUG 和 ALLOWED_HOSTS 这两个选项，将它们设置成如下的值：
    blogproject/settings.py
    DEBUG = False
    ALLOWED_HOSTS = ['127.0.0.1', 'localhost ', '.zmrenwu.com']
    ALLOWED_HOSTS 是允许访问的域名列表，127.0.0.1 和 localhost 是本地访问的域名，.zmrenwu.com 是访问服务器的域名（换成你自己的域名）。
    域名前加一个点表示允许访问该域名下的子域名，比如 www.zmrenwu.com、test.zmrenwu.com 等二级域名同样允许访问。如果不加前面的点则只
    允许访问 zmrenwu.com。
4、依赖库：
    项目还会依赖一些第三方 Python 库，为了方便在服务器上一次性安装，我们将全部依赖写入一个叫 requirements.txt 的文本文件中。
    激活本地的虚拟环境（如果你使用了虚拟环境的话），并进入项目的根目录，运行 pip freeze > requirements.txt 命令：
    (blogproject_env) C:\Users\yangxg\Workspace\blogproject>pip freeze > requirements.txt
    这时项目根目录下会生成了一个 requirements.txt 的文本文件，其内容记录了项目的全部依赖
3、目录结构：
        ~/sites/
        demo.zmrenwu.com/
            env/
            django-blog-tutorial/
        一台服务器可能部署多个网站，所有网站代码都放在 sites/ 目录下。demo.zmrenwu.com/ 这个文件夹以网站的域名命名，便于区分。
        env/ 是 python 虚拟环境目录。django-blog-tutorial/ 是 Django 博客项目目录

        接下来创建虚拟环境，先进入到 demo.zmrenwu.com 目录下，然后运行 virtualenv 命令创建虚拟环境
        cd ~/sites/demo.zmrenwu.com
        virtualenv --python=python3 env
        接着再从代码仓库把项目代码拉取过来，把 git clone 后的地址换成你自己的 GitHub 仓库地址！
        ls
        django-blog-tutorial  env
4、激活虚拟环境，再进入到项目根目录，即 requirements.txt 所在的目录，安装项目的全部依赖：
        source env/bin/activate
        $ cd django-blog-tutorial/
        (env):~/sites/demo.zmrenwu.com/django-blog-tutorial$ pip install -r requirements.txt
        收集静态文件
        虚拟环境下继续运行 python manage.py collectstatic 命令收集静态文件到 static 目录下：
        (env):~/sites/demo.zmrenwu.com/django-blog-tutorial$ python manage.py migrate
        创建超级用户:
        虚拟环境下继续运行 python manage.py createsuperuser 命令创建一个超级用户，方便我们进入 Django 管理后台

5、配置 Nginx
        demo.zmrenwu.com

        server {
            charset utf-8;
            listen 80;
            server_name demo.zmrenwu.com;

            location /static {
                alias ~/sites/demo.zmrenwu.com/django-blog-tutorial/static;
                #所有URL 带有 /static 的请求均由 Nginx 处理，alias 指明了静态文件的存放目录
            }

            location / {
                proxy_set_header Host $host;
                proxy_pass http://unix:/tmp/demo.zmrenwu.com.socket;
                #其它请求转发给 Django 处理。proxy_pass 后面使用了 unix 套接字，其作用是防止端口冲突
            }
        }


6、使用 Gunicorn
    Gunicorn 一般用来管理多个进程，有进程挂了Gunicorn 可以把它拉起来，防止服务器长时间停止服务，还可以动态调整 worker 的数量，
    请求多的时候增加 worker 的数量，请求少的时候减少
    在虚拟环境下，安装 Gunicorn
    (env):~/sites/demo.zmrenwu.com/django-blog-tutorial$ pip install gunicorn
    用 Gunicorn 启动服务器进程
    (env):~/sites/demo.zmrenwu.com/django-blog-tutorial$ gunicorn --bind unix:/tmp/demo.zmrenwu.com.socket blogproject.wsgi:application

7、自动启动Gunicorn
    。。。。。

